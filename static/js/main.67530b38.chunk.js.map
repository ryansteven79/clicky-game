{"version":3,"sources":["Image.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this","react_default","a","createElement","className","src","onClick","imageClicked","imageIndex","alt","Component","App","shuffleDeck","j","x","i","length","Math","floor","random","resetCards","Cards","clicked","state","images","alert","setState","currentScore","highScore","_this2","map","image","src_Image","data-clidked","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kqGAoBeA,qBAhBb,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACZH,0EAOC,IAAAO,EAAAJ,KAEP,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAA0BC,IAAKT,KAAKH,MAAMY,IAAKC,QAAS,kBAAMN,EAAKP,MAAMc,aAAaP,EAAKP,MAAMe,aAAaC,IAAI,eAZnHC,qBCyFLC,cApFb,SAAAA,EAAYlB,GAAO,IAAAO,EAAA,OAAAN,OAAAC,EAAA,EAAAD,CAAAE,KAAAe,IACjBX,EAAAN,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiB,GAAAZ,KAAAH,KAAMH,KAQRmB,YAAc,SAACV,GACb,IAAIW,EAAGC,EAAGC,EACV,IAAKA,EAAIb,EAAEc,OAAS,EAAGD,EAAI,EAAGA,IAC5BF,EAAII,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCD,EAAIZ,EAAEa,GACNb,EAAEa,GAAKb,EAAEW,GACTX,EAAEW,GAAKC,EAET,OAAOZ,GAjBUF,EAoBnBoB,WAAa,WACX,IAAK,IAAIL,EAAI,EAAGA,EAAIM,EAAML,OAAQD,IAChCM,EAAMN,GAAGO,SAAU,GAtBJtB,EA4BnBO,aAAe,SAACQ,GACd,IAAqC,IAAjCf,EAAKuB,MAAMC,OAAOT,GAAGO,QAAkB,CACzCG,MAAM,YACNzB,EAAKoB,aAELpB,EAAK0B,SAAS,CACZC,aAAc,EACdC,UAAW5B,EAAKuB,MAAMK,UACtBJ,OAAQH,IAEGrB,EAAKuB,MAAMC,OACjBT,GAAGO,SAAU,MACf,CACL,IAAIE,EAASxB,EAAKuB,MAAMC,OACxBA,EAAOT,GAAGO,SAAU,EACpBE,EAASxB,EAAKY,YAAYY,GAE1B,IAAIG,EAAe3B,EAAKuB,MAAMI,eAC9BA,EAEgB3B,EAAKuB,MAAMK,WAEzB5B,EAAK0B,SAAS,CACZE,UAAWD,IAIf3B,EAAK0B,SAAS,CACZJ,SAAS,EACTK,aAAcA,MAvDlB3B,EAAKuB,MAAQ,CACXI,aAAc,EACdC,UAAW,EACXJ,OAAQH,GALOrB,wEA8DV,IAAA6B,EAAAjC,KAEP,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0DACbH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBAAhB,UAA8CR,KAAK2B,MAAMI,eAC7D1B,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAAhB,eAAkDR,KAAK2B,MAAMK,aAEnE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEbR,KAAK2B,MAAMC,OAAOM,IAAI,SAACC,EAAOhB,GAC5B,OACEd,EAAAC,EAAAC,cAAC6B,EAAD,CAAO3B,IAAK0B,EAAM1B,IAAKE,aAAcsB,EAAKtB,aAAc0B,eAAcF,EAAMT,QAASd,WAAYO,cA5E7FL,aCGEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.67530b38.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Image extends Component {\n  constructor(props) {\n    super(props)\n\n  }\n\n  // common functions here\n\n\n  render() {\n    // console.log(this);\n    return (\n      <img className=\"img-fluid img-thumbnail\" src={this.props.src} onClick={() => this.props.imageClicked(this.props.imageIndex)} alt=\"the\"></img>\n    );\n  }\n}\n\nexport default Image;\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport Image from \"./Image\";\nimport Cards from './Cards.json';\n// import ghPages from 'gh-pages';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentScore: 0,\n      highScore: 0,\n      images: Cards\n    }\n  }\n\n  shuffleDeck = (a) => {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n    }\n    return a;\n  }\n\n  resetCards = () => {\n    for (var i = 0; i < Cards.length; i++) {\n      Cards[i].clicked = false;\n    }\n  }\n\n\n\n  imageClicked = (i) => {\n    if (this.state.images[i].clicked === true) {\n      alert(\"you lost\");\n      this.resetCards();\n      // console.log(Cards);\n      this.setState({\n        currentScore: 0,\n        highScore: this.state.highScore,\n        images: Cards\n      })\n      let images = this.state.images;\n      images[i].clicked = false;\n    } else {\n      let images = this.state.images;\n      images[i].clicked = true;\n      images = this.shuffleDeck(images);\n\n      let currentScore = this.state.currentScore;\n      currentScore++;\n\n      let highScore = this.state.highScore;\n      if (currentScore > highScore) {\n        this.setState({\n          highScore: currentScore\n        })\n      }\n\n      this.setState({\n        clicked: true,\n        currentScore: currentScore\n      });\n    }\n  }\n\n  render() {\n    // console.log(this);\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar navbar-light bg-primary fixed-top margin-bottom\">\n          <h1><span className=\"badge badge-success\">Score: {this.state.currentScore}</span></h1>\n          <h1>The Memory Game</h1>\n          <h1><span className=\"badge badge-danger\">High Score: {this.state.highScore}</span></h1>\n        </nav>\n        <div className=\"margin-bottom\"></div>\n        {\n          this.state.images.map((image, i) => {\n            return (\n              <Image src={image.src} imageClicked={this.imageClicked} data-clidked={image.clicked} imageIndex={i} />\n            )\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}